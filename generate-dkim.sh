#!/bin/bash

# Generates DKIM TXT Records by providing (or generating) SSL Certs.
# If there are no keys provided, this script will generate the private
# key and the public key.
#
# Copyright 2022 Joseph Alai
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>

DOMAIN=example.com
SELECTOR=default

#### FUNCTION __dkim::create_private BEGIN ########
# Creates private OpenSSL Key
# GLOBALS:
# ARGUMENTS:
# 	Path for private key
# OUTPUTS:
# 	Writes openssl RSA Private key to filepath
# RETURN:
# 	0 if success, non-zero otherwise.
function __dkim::create_private() {
    if [[ -e $PRIVATE_KEY ]]; then
        return 0
    fi

	printf "Creating RSA Private Key at $PRIVATE_KEY.\n\n"
	openssl genrsa -out $PRIVATE_KEY 2048
	if [[ $? ]]; then
		echo "Successfully created $PRIVATE_KEY"
		return 0
	else
		echo "Fail"
		return 1
	fi
}
#### FUNCTION __dkim::create_private END ########

#### FUNCTION __dkim::create_public BEGIN ########
# Creates public OpenSSL Key
# GLOBALS:
# ARGUMENTS:
#   Path for private key
#   Output path for public key
# OUTPUTS:
#   Writes openssl Public RSA key to filepath
# RETURN:
#   0 if success, non-zero otherwise.
function __dkim::create_public() {
	if [[ -e $PUBLIC_KEY ]]; then
	    return 0
	fi

	printf "Creating RSA Public Key at $PUBLIC_KEY.\n\n"
	openssl rsa -in $PRIVATE_KEY -pubout -out $PUBLIC_KEY
	if [[ $? ]]; then
		echo "Successfully created $PUBLIC_KEY"
		return 0
	else
		echo "Fail"
		return 1
	fi

}
#### FUNCTION __dkim::create_public END ########

#### FUNCTION __dkim::create_dkim BEGIN ########
# Creates DKIM TXT Record and saves it to a file
# GLOBALS:
# ARGUMENTS:
#   Path for private key
#   DKIM Selector
# OUTPUTS:
#   Writes DKIM TXT Record to filepath
#   Outputs DKIM TXT Record to STDOUT
# RETURN:
#   0 if success, non-zero otherwise.
function __dkim::create_dkim() {
    if [[ ! -e $PRIVATE_KEY ]]; then
        return 1
    fi

	printf "Creating DKIM TXT Record with selector $SELECTOR at $SELECTOR_TXT.\n\n"

	P=$(openssl rsa -in $PRIVATE_KEY -pubout -outform der 2>/dev/null | openssl base64 -A)
	SUCCSSS=$?

    printf "\n%s._domainkey.$DOMAIN. 86400 IN TXT \"v=DKIM1; k=rsa; p=%s\"\n\n\n" "$SELECTOR" "$P" > $SELECTOR_TXT

    printf "\nCopy the following directly into your text record.\n\nHost: \n\t%s._domainkey.$DOMAIN\n\nTXT\n\tv=DKIM1; k=rsa; p=%s\n\n" "$SELECTOR" "$P" >> $SELECTOR_TXT

	if [[ $SUCCESS -eq 0 ]]; then
		echo "Successfully created $SELECTOR_TXT"
		return 0
	else
		echo "Fail"
		return 1
	fi

}
#### FUNCTION __dkim::create_dkim END ########


function __dkim::generate_license() {
    printf "THESE FILES WERE GENERATED BY ./create-dkim.sh.\nThis program was written by Joseph Alai."
}

#### FUNCTION __dkim::run BEGIN ########
# Creates DKIM TXT Record and saves it to a file, along with any RSA needed
# GLOBALS:
#   Domain name
#   DKIM Selector
# ARGUMENTS:
#   Domain name
#   DKIM Selector
# OUTPUTS:
#   Writes RSA Private to file
#   Writes RSA Public to file
#   Writes DKIM TXT Record to filepath
#   Outputs DKIM TXT Record to STDOUT
# RETURN:
#   0 or empty if success, non-zero otherwise.
function __dkim::run() {
    DOMAIN="${1:-"$DOMAIN"}"
    SELECTOR="${2:-"$SELECTOR"}"

    PRIVATE_KEY="$DOMAIN/${DOMAIN}.private.pem"
    PUBLIC_KEY="$DOMAIN/${DOMAIN}.public.pem"
    SELECTOR_TXT="$DOMAIN/${SELECTOR}.${DOMAIN}.dkim.txt"

    if [[ ! -d "$DOMAIN" ]]; then
        mkdir -p "$DOMAIN"
    fi

    printf "${WHITE}Domain: %s\nPrivate key: %s\nPublic key: %s\nSelector: %s\n" $DOMAIN $PRIVATE_KEY $PUBLIC_KEY $SELECTOR
    if [[ ! -e $PRIVATE_KEY ]]; then
        __dkim::create_private
    else
        printf "Found private key at $PRIVATE_KEY.\n"
    fi

    if [[ ! -e $PUBLIC_KEY ]]; then
        __dkim::create_public
    else
        printf "Found public key at $PUBLIC_KEY.\n"
    fi

    __dkim::create_dkim
    printf "${WHITE}Successfully created DKIM TXT Record at $SELECTOR_TXT${NC}\n"
}

__dkim::run $@
